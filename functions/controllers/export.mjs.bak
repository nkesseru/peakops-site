// functions/controllers/export.mjs
import crypto from 'crypto';
import PDFDocument from 'pdfkit';
import { getDb } from '../lib/admin.mjs';
import { Storage } from '@google-cloud/storage';

function sha256(obj) {
  const json = typeof obj === 'string' ? obj : JSON.stringify(obj);
  return 'sha256:' + crypto.createHash('sha256').update(json).digest('hex');
}

// Optional: upload to GCS if BUCKET_NAME provided (else null)
function getStorage() {
  const bucket = process.env.BUCKET_NAME;
  if (!bucket) return null;
  const storage = new Storage(); // uses ADC or serviceAccount.json
  return { storage, bucket };
}

export async function exportSubmissionJSON(req, res) {
  try {
    const db = getDb();
    const { id } = req.params;
    const snap = await db.collection('submissions').doc(id).get();
    if (!snap.exists) return res.status(404).json({ ok:false, error:'not_found' });

    const data = snap.data();
    const snapshot = {
      submission_id: snap.id,
      created_at: data.created_at,
      regulator: data.regulator,
      payload: data.payload,
      preflight: data.preflight,
      rule_pack: data.rule_pack || {},
      exported_at: new Date().toISOString()
    };
    const hash = sha256(snapshot);

    // Optional: persist JSON to Storage
    const io = getStorage();
    if (io) {
      const key = `exports/${data.regulator}/${snap.id}.json`;
      await io.storage.bucket(io.bucket).file(key).save(JSON.stringify({hash, snapshot}, null, 2), {
        contentType: 'application/json'
      });
      res.setHeader('X-Storage-Key', key);
    }

    res.setHeader('X-Content-Hash', hash);
    return res.status(200).json({ ok:true, hash, snapshot });
  } catch (e) {
    console.error('export json error', e);
    return res.status(500).json({ ok:false, error:'internal' });
  }
}

export async function exportSubmissionPDF(req, res) {
  try {
    const db = getDb();
    const { id } = req.params;
    const snap = await db.collection('submissions').doc(id).get();
    if (!snap.exists) return res.status(404).json({ ok:false, error:'not_found' });

    const d = snap.data();
    const snapshot = {
      submission_id: snap.id,
      created_at: d.created_at,
      regulator: d.regulator,
      payload: d.payload,
      preflight: d.preflight,
      rule_pack: d.rule_pack || {},
      exported_at: new Date().toISOString()
    };
    const hash = sha256(snapshot);

    // Build a simple PDF summary (snapshot heads-up)
    const doc = new PDFDocument({ size:'A4', margin: 48 });
    const chunks = [];
    doc.on('data', c => chunks.push(c));
    doc.on('end', async () => {
      const pdfBuffer = Buffer.concat(chunks);

      // Optional: upload PDF to Storage
      const io = getStorage();
      if (io) {
        const key = `exports/${d.regulator}/${snap.id}.pdf`;
        await io.storage.bucket(io.bucket).file(key).save(pdfBuffer, {
          contentType: 'application/pdf'
        });
        res.setHeader('X-Storage-Key', key);
      }

      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('X-Content-Hash', hash);
      res.status(200).send(pdfBuffer);
    });

    // Header
    doc.fontSize(18).text(`${d.regulator} â€” Final Snapshot`, { underline:false });
    doc.moveDown(0.5);
    doc.fontSize(10).fillColor('#444').text(`Submission: ${snap.id}`);
    doc.text(`Exported:   ${snapshot.exported_at}`);
    doc.text(`Hash:       ${hash}`);
    if (snapshot.rule_pack?.version_id) {
      doc.text(`Rule Pack:  ${snapshot.rule_pack.regulator}@${snapshot.rule_pack.version_id}`);
    }
    doc.moveDown();

    // Quick sections
    doc.fillColor('#000').fontSize(12).text('Payload', { bold:true });
    doc.fontSize(9).fillColor('#111').text(JSON.stringify(snapshot.payload || {}, null, 2));
    doc.moveDown();

    doc.fontSize(12).fillColor('#000').text('Preflight');
    doc.fontSize(9).fillColor('#111').text(JSON.stringify(snapshot.preflight || {}, null, 2));
    doc.moveDown();

    doc.fontSize(12).fillColor('#000').text('Rule Pack');
    doc.fontSize(9).fillColor('#111').text(JSON.stringify(snapshot.rule_pack || {}, null, 2));

    doc.end();
  } catch (e) {
    console.error('export pdf error', e);
    return res.status(500).json({ ok:false, error:'internal' });
  }
}
